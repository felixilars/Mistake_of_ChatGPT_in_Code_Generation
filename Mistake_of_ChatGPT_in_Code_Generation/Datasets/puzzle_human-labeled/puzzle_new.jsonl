{"name": "puzzle_1", "entry_point": "g", "prompt": "def g(nums=[12, 25, 37, 50, 62, 75, 87, 99]):\n\"\"\"Find the solution: x (an integer) that should be the smallest number of right shifts required to make all the bits in the given list of integers `nums` zero.\"\"\""}
{"name": "puzzle_2", "entry_point": "g", "prompt": "def g(p=0.5, k=3):\n\"\"\"Find the solution: max_consecutive_wins (an integer) that should represent the maximum number of consecutive wins in a series of coin flips, where each flip has a probability p of winning and the goal is to reach k consecutive wins, such that the solution satisfies the condition that the maximum number of consecutive wins in 10,000 simulations is equal to max_consecutive_wins.\"\"\""}
{"name": "puzzle_3", "entry_point": "g", "prompt": "def g(nums=[5, 2, 8, 1, 4]):\n\"\"\"Find the solution: min_ops (an integer) that should represent the minimum number of operations required to sort the given list of integers `nums` in ascending order, where an operation is defined as a swap of two elements in the list.\"\"\""}
{"name": "puzzle_4", "entry_point": "g", "prompt": "def g(points=[(0, 0), (0, 1), (1, 0), (1, 1)]):\n\"\"\"Find the solution: max_circles (an integer) that should be the maximum number of unique circles that can be formed using the given list of points (a list of 2D coordinates), where a circle is defined by three distinct points.\"\"\""}
{"name": "puzzle_5", "entry_point": "g", "prompt": "def g(target_area=1000):\n\"\"\"Find the solution: rectangles (a list of rectangles, each defined by two tuples representing the top-left and bottom-right coordinates) that should have a total area of at least the target area (1000 by default) without any duplicate rectangles.\"\"\""}
{"name": "puzzle_6", "entry_point": "g", "prompt": "def g(arr=[1, 2, 3, 2, 1, 4, 5, 6]):\n\"\"\"Find the solution: max_distance (an integer) that should be the maximum distance between any two occurrences of the same element in the given array arr (a list of integers), such that the maximum distance between any two occurrences of the same element in the array is equal to max_distance.\"\"\""}
{"name": "puzzle_7", "entry_point": "g", "prompt": "def g(nums=[4, 2, 7, 1, 3, 5, 6]):\n\"\"\"Find the solution: min_ops (integer) that should be the minimum number of operations required to sort the given list `nums` (list of integers) using the insertion sort algorithm, such that the partially sorted list after `min_ops` operations is equal to the fully sorted list.\"\"\""}
{"name": "puzzle_8", "entry_point": "g", "prompt": "def g(prices=[10, 20, 15, 30, 40], max_transactions=2):\n\"\"\"Find the solution: max_profit (an integer) that should represent the maximum possible profit that can be achieved by buying and selling stocks at most max_transactions times, given a list of stock prices and a maximum number of transactions.\"\"\""}
{"name": "puzzle_9", "entry_point": "g", "prompt": "def g(nums=[1, 2, 3, 4, 5]):\n\"\"\"Find the solution: min_ops (integer) that should be the minimum number of operations required to make all elements in the list `nums` (a list of integers) equal by repeatedly replacing the maximum value with the minimum value.\"\"\""}
{"name": "puzzle_10", "entry_point": "g", "prompt": "def g(points=[(0, 0), (1, 0), (1, 1), (0, 1)], max_points=4, max_area=1.0):\n\"\"\"Find the solution: min_sides (an integer) that should be the minimum number of points required to form a polygon with an area not exceeding max_area, given a list of points (2D coordinates) and a maximum number of points to consider.\"\"\""}
{"name": "puzzle_11", "entry_point": "g", "prompt": "def g(arr1=[1, 2, 3, 4, 5], arr2=[4, 5, 6, 7, 8]):\n\"\"\"Find the solution: max_common (an integer) that should be the number of common elements between two lists arr1 and arr2.\"\"\""}
{"name": "puzzle_12", "entry_point": "g", "prompt": "def g(A=[1, 2, 3, 4, 5], L=10):\n\"\"\"Find the solution: max_subset_sum (an integer) that should be the maximum sum of a subset of the list A (a list of integers) such that the sum does not exceed L (an integer).\"\"\""}
{"name": "puzzle_13", "entry_point": "g", "prompt": "def g(n=10, target_sum=20, k=3):\n\"\"\"Find the solution: groups (lists of integers) that should be divided into sublists of length not more than k and sum equal to target_sum, given n as the total number of elements.\"\"\""}
{"name": "puzzle_14", "entry_point": "g", "prompt": "def g():\n\"\"\"Find the solution: p (a list of integers) that should contain consecutive elements whose sum is a prime number.\"\"\""}
{"name": "puzzle_15", "entry_point": "g", "prompt": "def g(n=1000):\n\"\"\"Find the solution: ls (a list of three integers) that should contain three numbers whose product equals the given number n (an integer with a default value of 1000).\"\"\""}
{"name": "puzzle_16", "entry_point": "g", "prompt": "def g(arr: List[int] = [1, 2, 3, 4, 5], m: int = 10):\n\"\"\"Find the solution: min_partitions (a list of lists of integers) that should partition the input array `arr` (a list of integers) into the minimum number of subarrays such that the sum of each subarray does not exceed `m` (an integer).\"\"\""}
{"name": "puzzle_17", "entry_point": "g", "prompt": "def g():\n\"\"\"Find the solution: n (an integer) that should have the property where the sum of its digits is equal to the sum of the digits of its square.\"\"\""}
{"name": "puzzle_18", "entry_point": "g", "prompt": "def g(coins=3, flips=2):\n\"\"\"Find the solution: sample_space (a set of tuples) that should contain all possible outcomes of flipping a certain number of coins (coins=3) a certain number of times (flips=2), such that the total number of outcomes in the sample space is equal to the total possible outcomes (2^(coins*flips)).\"\"\""}
{"name": "puzzle_19", "entry_point": "g", "prompt": "def g(durations=[10, 20, 30], speeds=[1, 2, 3]):\n\"\"\"Find the solution: min_time (an integer) that should be the minimum total time required to complete all tasks when each task's duration is divided by its corresponding speed, given lists of durations and speeds.\"\"\""}
{"name": "puzzle_20", "entry_point": "g", "prompt": "def g(circle=(0, 0, 10), circles=[(0, 0, 1), (1, 1, 2), (2, 2, 3)]):\n\"\"\"Find the solution: max_circles (an integer) that should be the maximum number of circles from the list of circles (a list of tuples representing the center coordinates and radius of each circle) that can be packed inside a given circle (a tuple representing the center coordinates and radius of the circle) without overlapping.\"\"\""}
{"name": "puzzle_21", "entry_point": "g", "prompt": "def g():\n\"\"\"Find the solution: 9x9 Sudoku grid that should contain the numbers 1-9 in each row, column, and 3x3 sub-grid without repeating any number.\"\"\""}
{"name": "puzzle_22", "entry_point": "g", "prompt": "def g():\n\"\"\"Find the solution: routes (a list of lists of 2D coordinates) that should form a path visiting exactly 10 distinct cities, where each city is a 2D coordinate and each route is a sequence of adjacent cities (i.e., the Manhattan distance between consecutive cities in a route is 1).\"\"\""}
{"name": "puzzle_23", "entry_point": "g", "prompt": "def g(arr=[1, 2, 3, 4, 5]):\n\"\"\"Find the solution: max_distance (an integer) that should be the maximum distance between any two identical elements in a circular array arr (a list of integers), considering the array as circular by concatenating it with itself.\"\"\""}
{"name": "puzzle_24", "entry_point": "g", "prompt": "def g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]):\n\"\"\"Find the solution: subs (a list of lists of integers) that should contain subsets of indices of the list `nums` (a list of prime numbers) such that the sum of the binary representations of the corresponding prime numbers at these indices equals the count of prime factors for each prime number in `nums`.\"\"\""}
{"name": "puzzle_25", "entry_point": "g", "prompt": "def g(nums=[10, 15, 20, 30, 45]):\n\"\"\"Find the solution: max_prime_gcd (an integer) that should be the greatest common divisor of the given list of integers `nums` that is also a prime number.\"\"\""}
{"name": "puzzle_26", "entry_point": "g", "prompt": "def g(dependencies=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 1]]):\n\"\"\"Find the solution: schedule (a list of lists of task IDs) that should contain tasks in an order such that each task is executed after all its dependent tasks, given the dependencies (a list of lists where each sublist contains two task IDs, the first being dependent on the second).\"\"\""}
{"name": "puzzle_27", "entry_point": "g", "prompt": "def g(tasks=[('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D'), ('D', 'E')]):\n\"\"\"Find the solution: days (integer) that should represent the maximum number of levels in a topological sorting of the given tasks (list of tuples representing directed edges in a graph), such that each task is dependent on the previous one.\"\"\""}
{"name": "puzzle_28", "entry_point": "g", "prompt": "def g(points=[(0, 0), (0, 1), (1, 0), (1, 1)]):\n\"\"\"Find the solution: min_distance_to_origin (a float) that should be the minimum distance from the origin (0, 0) to any point in the list of points (a list of 2D tuples), such that it equals the minimum distance calculated from the given points.\"\"\""}
{"name": "puzzle_29", "entry_point": "g", "prompt": "def g(amount=12, coins=[1, 2, 5, 10]):\n\"\"\"Find the solution: min_coins (an integer) that should be the minimum number of coins from the list of coins (a list of integers) that sum up to the given amount (an integer), using each coin type at most once.\"\"\""}
{"name": "puzzle_30", "entry_point": "g", "prompt": "def g(investments=[(0.4, 10), (0.3, 20), (0.3, 30)], budget=100, min_return=50):\n\"\"\"Find the solution: min_risk (a float) that should be the minimum risk achievable by investing in a portfolio of investments (a list of tuples, where each tuple contains a risk and a return value) within a given budget (an integer) and meeting a minimum return requirement (an integer), such that the calculated risk of the portfolio equals min_risk.\"\"\""}
{"name": "puzzle_31", "entry_point": "g", "prompt": "def g(players=[(1, 2), (2, 3), (3, 4)], k=2):\n\"\"\"Find the solution: teams (a list of sets of player indices) that should be divided into groups such that the skill levels of players within each team are in non-decreasing order, given a list of players (a list of tuples containing player index and skill level) and an integer k (not used in the function).\"\"\""}
{"name": "puzzle_32", "entry_point": "g", "prompt": "def g(n_items=10, k=5):\n\"\"\"Find the solution: n (an integer) that should be equal to k raised to the power of n_items, where k is an integer and n_items is a positive integer.\"\"\""}
{"name": "puzzle_33", "entry_point": "g", "prompt": "def g(nums=[10, 15, 20, 30, 45]):\n\"\"\"Find the solution: max_prime_sum (an integer) that should be the maximum sum of prime numbers in the list `nums` (a list of integers) where each prime number's binary sum equals the count of prime factors of another number in the list.\"\"\""}
{"name": "puzzle_34", "entry_point": "g", "prompt": "def g(n=10, k=5, prob_dist=lambda x: 0.5 ** x):\n\"\"\"Find the solution: max_successes (a percentage value) that should represent the minimum percentage of successful trials in which exactly k heads are obtained in n coin flips, such that the probability of obtaining heads in a single flip follows the given probability distribution prob_dist.\"\"\""}
{"name": "puzzle_35", "entry_point": "g", "prompt": "def g(str='abcba'):\n\"\"\"Find the solution: min_steps (an integer) that should be the minimum number of operations (insertions, deletions, or substitutions) required to transform the input string into its reverse, given the string 'abcba'.\"\"\""}
{"name": "puzzle_36", "entry_point": "g", "prompt": "def g(graph=[[0, 1, 1], [1, 0, 1], [1, 1, 0]]):\n\"\"\"Find the solution: min_cost (an integer) that should be the minimum total cost of traversing all nodes in the graph (a 2D list of integers) exactly once and returning to the starting node, where the cost of traversing from one node to another is given by the corresponding value in the graph.\"\"\""}
{"name": "puzzle_37", "entry_point": "g", "prompt": "def g(items=[(3, 60, 5), (2, 100, 7), (1, 120, 11)], capacity=5, max_value=220):\n\"\"\"Find the solution: max_value (an integer) that should be the maximum total value that can be put in a knapsack of capacity (an integer) by selecting items (a list of tuples, each containing the weight, value, and another attribute of an item) in such a way that the total weight does not exceed the capacity.\"\"\""}
